name: Build, Test, and Deploy Java App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'  # <-- your Java version

      - name: Build with Maven
        run: mvn -B -DskipTests package  # <-- adjust if you run tests separately

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ecommerce-app-1.0.2         # <-- must match what youâ€™ll download later
          path: target/*.jar                 # <-- path to your built JAR (or zip)

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    # environment: dev     # optional if you want GH Environments

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ecommerce-app-1.0.2          # <-- must match upload step
          path: build-out

      - name: Azure login (Service Principal)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}   # <-- JSON for SP: {clientId, clientSecret, tenantId, subscriptionId}

      - name: Upload JAR/ZIP to Blob and create SAS
        uses: azure/cli@v2
        env:
          AZ_STORAGE_ACCOUNT:   ${{ secrets.AZ_STORAGE_ACCOUNT }}     # e.g. anasstoragegk
          AZ_STORAGE_CONTAINER: ${{ secrets.AZ_STORAGE_CONTAINER }}   # e.g. releases (lowercase)
          AZ_STORAGE_KEY:       ${{ secrets.AZ_STORAGE_KEY }}
        with:
          inlineScript: |
            set -e
            FILE=$(ls build-out)   # picks the single file in build-out
            az storage container create \
              --name "$AZ_STORAGE_CONTAINER" \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" >/dev/null

            az storage blob upload \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --container-name "$AZ_STORAGE_CONTAINER" \
              --file "build-out/$FILE" \
              --name "$FILE" --overwrite

            SAS=$(az storage blob generate-sas \
              --account-name "$AZ_STORAGE_ACCOUNT" \
              --account-key "$AZ_STORAGE_KEY" \
              --container-name "$AZ_STORAGE_CONTAINER" \
              --name "$FILE" --permissions r \
              --expiry "$(date -u -d '+2 hours' '+%Y-%m-%dT%H:%MZ')" \
              --https-only --full-uri -o tsv)

            echo "PACKAGE_SAS_URL=$SAS" >> $GITHUB_ENV

      - name: Push deploy script to VM and execute
        uses: azure/cli@v2
        env:
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}   # e.g. Anas-LABSs
          AZURE_VM_NAME:       ${{ secrets.AZURE_VM_NAME }}           # e.g. Azure-VM-Anas1
          PACKAGE_SAS_URL:     ${{ env.PACKAGE_SAS_URL }}
        with:
          inlineScript: |
            az vm run-command invoke \
              --resource-group "$AZURE_RESOURCE_GROUP" \
              --name "$AZURE_VM_NAME" \
              --command-id RunShellScript \
              --scripts "cat > /tmp/deploy-java.sh << 'EOF'
            #!/bin/bash
            set -e
            APP_NAME=\${APP_NAME:-javaapp}
            APP_DIR=\${APP_DIR:-/opt/javaapp}
            APP_PORT=\${APP_PORT:-8080}
            PACKAGE_URL="\$1"
            APP_USER=\${APP_USER:-\$(id -un)}

            command -v java >/dev/null 2>&1 || {
              sudo apt-get update -y
              sudo apt-get install -y openjdk-21-jre-headless unzip curl
            }
            command -v unzip >/dev/null 2>&1 || { sudo apt-get update -y && sudo apt-get install -y unzip; }

            sudo mkdir -p "\$APP_DIR/releases" "\$APP_DIR/current"
            echo "Downloading package..."
            curl -fSL "\$PACKAGE_URL" -o /tmp/javaapp.zip

            RELEASE_DIR="\$APP_DIR/releases/\$(date +%Y%m%d-%H%M%S)"
            sudo mkdir -p "\$RELEASE_DIR"
            sudo unzip -o /tmp/javaapp.zip -d "\$RELEASE_DIR"

            JAR=\$(ls -1 "\$RELEASE_DIR"/*.jar 2>/dev/null | head -n1 || true)
            if [ -z "\$JAR" ]; then
              echo "ERROR: No JAR found in \$RELEASE_DIR"
              exit 1
            fi
            echo "Jar: \$JAR"

            sudo chown -R "\$APP_USER:\$APP_USER" "\$RELEASE_DIR"
            sudo rm -rf "\$APP_DIR/current"
            sudo ln -sfn "\$RELEASE_DIR" "\$APP_DIR/current"

            SERVICE_FILE="/etc/systemd/system/\${APP_NAME}.service"
            sudo tee "\$SERVICE_FILE" >/dev/null <<SERVICE
            [Unit]
            Description=\${APP_NAME} Java Service
            After=network.target

            [Service]
            User=\${APP_USER}
            WorkingDirectory=\${APP_DIR}/current
            ExecStart=/usr/bin/java -jar "\$JAR" --server.port=\${APP_PORT}
            Restart=always
            RestartSec=5

            [Install]
            WantedBy=multi-user.target
            SERVICE

            sudo systemctl daemon-reload
            sudo systemctl enable --now "\${APP_NAME}.service"
            sudo systemctl status "\${APP_NAME}.service" --no-pager || true
            sudo ss -lntp | grep ":\${APP_PORT}" || echo "No listener on \${APP_PORT}"
            EOF
            chmod +x /tmp/deploy-java.sh
            sudo APP_USER=azure APP_DIR=/opt/javaapp APP_NAME=javaapp APP_PORT=8080 \
              -E /tmp/deploy-java.sh "$PACKAGE_SAS_URL"
